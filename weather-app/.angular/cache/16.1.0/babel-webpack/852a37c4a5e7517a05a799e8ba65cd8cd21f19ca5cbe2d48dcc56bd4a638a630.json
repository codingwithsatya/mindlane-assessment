{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TemperatureComponent_div_8_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tempereture_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", tempereture_r2.city, \" : \", tempereture_r2.temperature, \"\\u00B0C \");\n  }\n}\nfunction TemperatureComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Temperature\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TemperatureComponent_div_8_li_4_Template, 2, 2, \"li\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.temperatures);\n  }\n}\nexport class TemperatureComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.cities = [];\n    this.temperatures = [];\n  }\n  ngOnInit() {}\n  addCity(city) {\n    this.cities.push(city);\n  }\n  fetchTemperature() {\n    this.temperatures = [];\n    for (const city of this.cities) {\n      this.weatherService.getTemperature(city).subscribe(response => {\n        const temperature = response.main.temp;\n        this.temperatures.push({\n          city,\n          temperature\n        });\n      });\n    }\n  }\n}\nTemperatureComponent.ɵfac = function TemperatureComponent_Factory(t) {\n  return new (t || TemperatureComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\nTemperatureComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TemperatureComponent,\n  selectors: [[\"app-temperature\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[\"placeholder\", \"Enter a city\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TemperatureComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"Add Cities\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function TemperatureComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.city = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function TemperatureComponent_Template_button_click_4_listener() {\n        return ctx.addCity(ctx.city);\n      });\n      i0.ɵɵtext(5, \"Add\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function TemperatureComponent_Template_button_click_6_listener() {\n        return ctx.fetchTemperature();\n      });\n      i0.ɵɵtext(7, \" Fetch Tempareture\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, TemperatureComponent_div_8_Template, 5, 1, \"div\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.city);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.temperatures.length > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","tempereture_r2","city","temperature","ɵɵtemplate","TemperatureComponent_div_8_li_4_Template","ɵɵproperty","ctx_r0","temperatures","TemperatureComponent","constructor","weatherService","cities","ngOnInit","addCity","push","fetchTemperature","getTemperature","subscribe","response","main","temp","ɵɵdirectiveInject","i1","WeatherService","selectors","decls","vars","consts","template","TemperatureComponent_Template","rf","ctx","ɵɵlistener","TemperatureComponent_Template_input_ngModelChange_3_listener","$event","TemperatureComponent_Template_button_click_4_listener","TemperatureComponent_Template_button_click_6_listener","TemperatureComponent_div_8_Template","length"],"sources":["/Users/satyapramodr/Desktop/github/weather-app/src/app/temperature/temperature.component.ts","/Users/satyapramodr/Desktop/github/weather-app/src/app/temperature/temperature.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../weather.service';\n\n@Component({\n  selector: 'app-temperature',\n  templateUrl: './temperature.component.html',\n  styleUrls: ['./temperature.component.css'],\n})\nexport class TemperatureComponent implements OnInit {\n  cities: string[] = [];\n  temperatures: { city: string; temperature: number }[] = [];\n  city: string; // Add this line to declare the 'city' property\n\n  constructor(private weatherService: WeatherService) {}\n\n  ngOnInit(): void {}\n\n  addCity(city: string): void {\n    this.cities.push(city);\n  }\n\n  fetchTemperature(): void {\n    this.temperatures = [];\n    for (const city of this.cities) {\n      this.weatherService.getTemperature(city).subscribe((response) => {\n        const temperature = response.main.temp;\n        this.temperatures.push({ city, temperature });\n      });\n    }\n  }\n}\n","<div>\n    <h2>Add Cities</h2>\n    <input [(ngModel)]=\"city\" placeholder=\"Enter a city\">\n    <button (click)=\"addCity(city)\">Add</button>\n    <button (click)=\"fetchTemperature()\"> Fetch Tempareture</button>\n</div>\n\n<div *ngIf=\"temperatures.length > 0\">\n    <h2>Temperature</h2>\n    <ul>\n        <li *ngFor=\"let tempereture of temperatures\">\n            {{ tempereture.city }} : {{ tempereture.temperature }}°C\n        </li>\n    </ul>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}